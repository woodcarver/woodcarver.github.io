<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Wood Carver]]></title>
  <link href="http://woodcarver.github.io/atom.xml" rel="self"/>
  <link href="http://woodcarver.github.io/"/>
  <updated>2016-02-18T00:33:28+08:00</updated>
  <id>http://woodcarver.github.io/</id>
  <author>
    <name><![CDATA[Wood Carver]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux系统状态命令详解]]></title>
    <link href="http://woodcarver.github.io/blog/2016/02/17/deep-insight-of-linux-system-status-description-commands/"/>
    <updated>2016-02-17T21:58:48+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/02/17/deep-insight-of-linux-system-status-description-commands</id>
    <content type="html"><![CDATA[<h1>Commands about I/O</h1>

<ul>
<li><p>什么是I/O
再让我们看一眼csapp的那幅经典图
<img src="../images/posts/computer_organization.png" alt="computer organization" />
看到所有的设备都是通过I/O bridge把数据移动到Main memory上，然后再主存再和CPU交互进行计算。当CPU有输出时，也是先输出到主存上，然后再输入到设备上。而再计算机中I/O设备就只除去CPU和主存的设备，也成外围设备。
介绍完I/O设备，那什么是I/O呢？按照《Unix系统内幕》的定义：</p>

<blockquote><p>The I/O subsystem haldes the movement of data between memory and peripheral devices such as disks, printers, and terminals.
所以I/O就是指I/O设备和memory之间数据移动。</p></blockquote></li>
<li><p>怎么才算是一次I/O</p>

<h2>iostat</h2>

<h2>top</h2>

top对I/O的描述是用I/O wait这个指标，例如下图：
<img src="../images/posts/top_command_short.png" alt="top command" />
其中I/O wait 的定义是：

<blockquote><p>I/O wait is the percentage of time your processors are waiting on the disk.
I/O wait就是CPU在整个任务处理中等待闲置的时间，举个例子：一个任务一共使用了1s，但是其中从从磁盘中取数据花了700ms，而在磁盘读取数据时CPU是闲置的，所以CPU的等待I/O的时间占了70%，即I/O wait 是70%。</p></blockquote></li>
</ul>


<p><code>threshold：当I/O wait &gt; 1/CPU_cores 可以判断明显出现了I/O瓶颈(why?)。</code></p>

<h2>sar</h2>

<p>同样使用I/O wait这个指标，每10mini(默认时间间隔，可以调节)纪录一次系统状态值,保留一段时间的历史数据。</p>

<h2>dstat</h2>

<p>发现这个命令组合很有意思
dstat -tdD total,sda,sdb,sdc,md1 60</p>

<h2>Reference</h2>

<ul>
<li>[深入理解计算机系统（第二版）]</li>
<li>[Unix系统内幕]</li>
<li><a href="http://blog.scoutapp.com/articles/2011/02/10/understanding-disk-i-o-when-should-you-be-worried">understanding disk i/o - when should you be worried?</a></li>
<li><a href="http://veithen.github.io/2013/11/18/iowait-linux.html">The precise meaning of I/O wait time in Linux</a></li>
</ul>


<h1>系统状态综合诊断</h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduce Thrift]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/26/introduce-thrift/"/>
    <updated>2016-01-26T14:46:14+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/26/introduce-thrift</id>
    <content type="html"><![CDATA[<h2>History</h2>

<ul>
<li>诞生于facebook
facebook开源出的RPC开源框架，现在已经成为Apache的顶级项目。</li>
</ul>


<h2>Why need thrift</h2>

<p>This question can also be instead of another one&ndash;Is RPC service complicated?
Before I try to know distributed system, I don&rsquo;t know that it need using a book to make PRC clearly and RPC is an absolutly important skill requirement on service developing posistion.
If you want to know thrift, you must know RPC.</p>

<h2>What is RPC</h2>

<p>RPC的全称是Remote Procedure Call。这种类型的技术专注与格式化客户端和服务端传输，以实现更方便的远程交互，甚至能做到和本地调用无多大区别的程度。
整个过程是客户端发送RPC请求到服务端，服务端处理后再发结果反馈过来。听这很简单，看着很容易，而且很熟悉。这不就是cs模型吗？但是其中涉及的难点就隐藏在老生常谈的信息通信中。比如消息体的打包，拆分，解读等等。
目的就是保质保量的让消息正确抵达目的地。
读过计算机网络的都知道，如果一切都正常的话是最简单的情况，但是旁枝的异常情况和各种因素的权益会让系统复杂n倍。
涉及到通信就需要考虑到一下几个因素：
1. 时间性
2. 数据完整性</p>

<p>让我们来仔细列出这个动态系统的主题：
1. client： 动作——request，receive
2. server：动作——process，send
3. message</p>

<h2>thrift的定义中的特性</h2>

<p>thrift的官方定义如下：</p>

<blockquote><p>The Apache Thrift software framework, for scalable cross-language services development, combines a software stack with a code generation engine to build services that work efficiently and seamlessly between C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages.</p></blockquote>

<p>先解释下这个定义都讲了什么。
- software framework：本身是一个软件框架，意味这你自己需要补充其中的业务逻辑
- services development：这个框架是为了辅助开发者开发出自己的一个网络服务c/s软件，而这个服务具备接下来的两个重要特点：
    - <a href="http://www.infoq.com/cn/news/2007/10/whatisscalability">scalable 可伸缩性</a>：？？为啥说是可伸缩的？根据可伸缩的核心特征——处理能力能随这个扩展服务规模而提升。
    - cross-language 跨语言：这个可能是thrift的最大特点了，为了实现这个特性，thrift直接为此定义了一套中间语言，并且配备了一个此语言到各种目标语言的编译器。不过说起来跨语言到底指什么呢？其实一句话概括就是服务短和客户端可以是不同语言开发的，比如官方的例子：客户端是python，服务端是java。而这个中间语言就是只定义一遍服务的逻辑语义一次，通过编译器转成各种目标语言多次。从而解决重复编写的问题。</p>

<h2>需要的知识背景</h2>

<p>thrift的所有技能都在操作系统和计算机网络里可以找到,
推荐书籍：
- 计算机网络
- Unix网络编程
- Unix系统内幕</p>

<h2>一个简单的开发例子</h2>

<h2>Reference</h2>

<ul>
<li><a href="http://blog.csdn.net/docong/article/details/6028428">thrift 白皮书</a></li>
<li><a href="https://thrift.apache.org/static/files/thrift-20070401.pdf">thrift white paper</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Graph]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/18/book-graph/"/>
    <updated>2016-01-18T22:23:16+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/18/book-graph</id>
    <content type="html"><![CDATA[<h3>知识点覆盖结构</h3>

<ul>
<li>面向对象编程——多继承，虚拟方法，对象构建与析构顺序，异常处理。</li>
<li>前端——异步逻辑与终止，REST API，验证用户输入。</li>
<li>算法与数据结构——动机，用法，平均及最差情况下的复杂度。</li>
<li>后端与架构——内存模型，垃圾处理机制，多线程，线程锁机制，benchmarking， profiling。</li>
<li>函数式编程——Lambdas，curring，排序操作，一元。</li>
<li>内核层次——文件系统，网络，POSIX，协议，标准的检验与分析工具。</li>
</ul>


<h3>studying tree</h3>

<h5>程序设计</h5>

<ul>
<li>把基础的数据结构的c语言实现在纸上写三遍以上，用我能想到的最精简最优化的方法

<ul>
<li>算法：c语言实现</li>
<li>Redis源码的实现版本 + Redis设计与实现</li>
</ul>
</li>
<li>阅读CARM（A Reference Manual）和TCPL (The C programming language)，确保不会遗漏C语言的每个细节</li>
<li>阅读Writing Solid Code、Elements of Programming <code>No 5</code></li>
<li>阅读Science of Programming，做到可以证明自己的程序的正确性（前条件+后条件+不变式） <code>No.1</code>——<strong>有点读不下去啊,放置每天在公司小读一点</strong></li>
<li>阅读《计算机程式构造于解析》</li>
<li>阅读《计算机的本质》</li>
<li>阅读《代码大全》，Practice of programming，了解代码构建过程的整个过程，特别注意其中的代码风格的约束 <code>No.4</code> &ndash; 这本书的关键是怎么吸收，讲的很仔细但是也很难全部转化</li>
<li>Programming Language Pragmatics（程序设计语言）</li>
<li>How to design programm <code>No.7</code></li>
</ul>


<h4>算法</h4>

<ul>
<li>阅读《算法导论》，最仔细的阅读，weight=50%</li>
<li>leetcode，weight=40%

<ul>
<li>c + python</li>
</ul>
</li>
<li>阅读《编程之美》</li>
<li>CareerCup

<ul>
<li>book + website</li>
</ul>
</li>
<li>Topcoder</li>
</ul>


<h4>操作系统</h4>

<ul>
<li>重读《Modren Operating System》<code>No.3</code> &ndash; 感觉写的很啰嗦，暂时不读了</li>
<li>阅读《Computer System a Programmer&rsquo;s Perspective》 <code>No.2</code>——已经读完，书评不够详细，剩下最后的上机实验，need更多的并发和服务模型</li>
<li>阅读《Computer Architectur:Approche of qulitity》 <code>No.6</code></li>
<li>阅读《Unix环境编程》</li>
</ul>


<h4>计算机网络</h4>

<ul>
<li>阅读《计算机网络》</li>
<li>阅读并实践《Unix网络编程》</li>
</ul>


<h4>数据处理、数据挖掘</h4>

<ul>
<li>阅读《数据挖掘》，了解数据挖掘的概念，并思考自己的工作所处的层次</li>
<li>阅读《hadoop权威》，必须写一些应用工作的代码</li>
<li>阅读《高性能mysql》</li>
<li>阅读《数据库设计基础》</li>
<li>阅读 实时流统计的代码</li>
<li>弄清楚数据流上的各个基础设施的用法：hadoop，hive，kafka，spark，logtailer，strom，zookepper</li>
<li>阅读《七周七并发》</li>
<li>阅读《redis设计与实现》</li>
<li>阅读一本分布式系统和计算的数据，弄懂其中的概念和基本实现，结合我的爬虫</li>
<li>了解现今市场上所有的数据储存软件：Nosql：redis，memcached；Relation DB:Infobright,Mysql</li>
</ul>


<h4>编程语言</h4>

<ul>
<li>阅读《Effective Java》</li>
<li>阅读《Java core》</li>
<li>阅读《Java 并发编程设计》</li>
<li>阅读《Python基础教程》</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pentaho和Pivotal]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/17/business-dataming-ecosystem-investigation/"/>
    <updated>2016-01-17T13:55:01+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/17/business-dataming-ecosystem-investigation</id>
    <content type="html"><![CDATA[<p>接触到的关于数据处理的商业软件基本都处于pentoha和pivotal，或者总是和这两家公司有关系，所以想做个调查，报告如下：</p>

<h1><a href="http://www.pentaho.com/">Pentaho</a></h1>

<h1><a href="https://pivotal.io/">pivotal</a></h1>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Read-note: How Google Works]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/13/read-note-how-google-works/"/>
    <updated>2016-01-13T23:39:15+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/13/read-note-how-google-works</id>
    <content type="html"><![CDATA[<p>创意精英：
- 过硬的专业知识，懂得如何使用专业工具，还需要具备充足的实践经验
- 拥有分析头脑，可以利用数据做出决策，同时也懂得数据的误导性，从而不会沉迷其中
- 有商业头脑，知道专业技术、优质产品和商业成功是环环相扣的、也对这三个要素的价值了然于胸
- 有创造力
- 有竞争头脑，干劲十足，即使在工作之余也不停止前进的脚步
- 用户头脑，无论身处哪里行业，几乎没有人能比他们更懂得用户或消费者对产品的看法
- 自动自发，不会坐等别人为他们指出方向，对于有悖于他们信念的知识，他们会选择充耳不闻
- 心态开放，于他们自由合作，在评判构思和结论时，看重优点和而和价值而非出处</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[介绍vertica]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/13/introduce-vertica/"/>
    <updated>2016-01-13T18:55:49+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/13/introduce-vertica</id>
    <content type="html"><![CDATA[<p>最近olap系统开始上线vertica。话说vertica的速度真实不是盖的，太快了，完全盖过infobright的所有风采，完全不留痕迹！</p>

<h1>vertica的基本架构介绍</h1>

<p>首先定型一下vertica在数据库领域里的分支：
1. 面向批量分析数据(OLAP)
2. 关系型数据库(RDBMS)
3. 面向列式储存(column-store architechture)
4. 分布式(distributed)
按照vertica在官方文档中提到自己的特性：4 c's——<a href="https://my.vertica.com/docs/7.0.x/HTML/index.htm#Authoring/ConceptsGuide/Other/TheHPVerticaApproach.htm%3FTocPath%3DConcepts%2520Guide%7C_____1">Column Storage， Compression，Clustering，Continuous Performance</a>
其中高压缩比这个特性一般是附属于面向列式储存的特性的，不是一个正交属性。</p>

<p>当然类似于mysql，sql server等面向OLTP的数据库，其主要处理事务型数据。而vertica的设计目的已经进入到了另一个领域OLAP（OLTP和OLAP的对比，<a href="">参看这里</a>）。所以相对于OLTP大多数采用row-store的储存架构，OLAP一般会用column-store架构。<a href="">这里可以思考一下为什么会有这样的不同</a>。
上面这些都是一个成型的数据库设计架构选择。需要先了解上面提到的概念，你才可以明白为什么市场上会有如此之多的数据产品，还有vertiac的价值到底在哪里。</p>

<p>一些概念中vertica中也做了相应的变化，接下来我们来看看vertica中的一些重要概念。</p>

<h2>储存设计</h2>

<p>因为Vertica是面向列式储存的数据库，其读取也是按列为单位，其中读取实际单位是projections（作为vertica的FlexStore体系中的一个概念，假如说column-store是为了加快OLAP数据库查询速度的首选，那么FlexStore的存在就是进一步在这基础上从physical design, database storage, and query execution三个方面提升速度）。
其中打破了按表储存的架构，表在vertica中只是一个逻辑概念，其本身还是一个特殊的projections，其物理储存全部用的是projections：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Projection
</span><span class='line'>Optimized collections of table columns that provide physical storage for data. A projection can contain some or all of the columns of one or more tables. A projection that contains all of the columns of a table is called a super-projection. A projection that joins one or more tables is called a pre-join projection.</span></code></pre></td></tr></table></div></figure>


<ul>
<li>查看projection
select node_name,wos_row_count,ros_row_count from projection_storage where anchor_table_name=&lsquo;dim_exp&rsquo;;</li>
<li>wos vs ros
<a href="http://vertica-forums.com/viewtopic.php?t=126">http://vertica-forums.com/viewtopic.php?t=126</a></li>
</ul>


<h2>如何hack</h2>

<p>上面讲了很多原理，现在我们就开始动手操作吧，俗话说说的不如做的。</p>

<h3>删除数据——分区的最大用处</h3>

<p>到底使用分区比较好呢？还是用purage_table比较好呢？
果断构建partition好，因为如果用purage对于已经转移好的ros数据块（到底会怎么样？解释不清楚了吧！）速度会很慢。<a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/PURGE_TABLE.htm">https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/PURGE_TABLE.htm</a></p>

<h3>索引到底是个什么鬼</h3>

<h3>查看执行的任务，类似于mysql的show processlist</h3>

<p>SELECT * FROM SESSIONS;</p>

<h3>数据类型</h3>

<p>在vertica中除了对int的定义不同，相比其他储存引擎，vertica的所有整形都是用64bit的，包括tinyint。
在vertica主意使用char的问题，发现当定义char(200),不满200长度的字段，会自动补全空白，这样改变了数据的内容，对于精确搜索时，这是个坑。最好改成varchar，但现在还不明白这个的性能有什么差别。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于北京人口的一些想法]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/09/think-about-the-popular-of-beijing/"/>
    <updated>2016-01-09T15:44:51+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/09/think-about-the-popular-of-beijing</id>
    <content type="html"><![CDATA[<p>最近因为北京市出台《北京市居民积分制度》受到了在北京非户籍打拼的年轻人关注，自然这种政治、民生话题肯定能在知乎上找到话题，其中就有一个提问：<a href="">todo</a>。
我作为一个名在北京默默无闻工作了2年半的IT工作者，开始对这个问题不包意见，对自己丝毫不了解的行业（中国zf），我没有依据和逻辑基础来判断。直到我在图书馆读了一本《北京市人口发展》的数据后，一个观点突然浮现在我脑海里。那就是：
80、90后不要期待北京市政府能开放户籍政策，如果在毕业的时候没有难道户口，想定居又不想通过婚姻的方式的话需要离开北京。</p>

<p>为什么我得出这个结论？看看下面的北京人口，户籍和非户籍人口曲线图。
大约从2000开始非户籍人口的比例大幅度增加，而户籍人口的增加却区域平缓。总提老说户籍竞争越来越激烈。</p>

<p>其次看全国出生人口曲线图：
会发现出生人口在90年达到高峰，而现在90年左右出生的人现在正式年轻力壮的时候。
再看第三张图，北京的历年出生人口曲线图：
发现北京户籍出生人口从93年开始就严重下降。
第三张图看出北京的本土人口增加市递减的加上超低的出生率，导致了严重的老龄化人口结构。所以为了维持北京的经济发展，北京需要不断吸收<code>年轻</code>的外来人口。
为什么强调年轻呢？
因为年轻的人口才能解决北京的人口结构失衡。当然这事废话。但是年轻一个属性其实意味深远。现在我们对中国的低生育率和越来越少的儿童习以为常，而且认为大城市为了竞争更过的人才来京，需要放宽人口政策。并且乐观的认为我们现在这些年轻人终于被奉献了人生的地方——北京所重视了。
一定程度上这事实，北京必然会越来越重视人才，但是那是未来的人才。看看那张全国历年出生人口图，就会发现现在我们就是那批婴儿潮，也就是说我们就处于中国年轻人口最鼎盛的时候。此时北京最不缺的就是年轻人，他尽管把门槛和要求提的很高，也不怕年轻人口流失。
所以说北京的户籍开放绝对轮不到我们这代人，并且我还处于北京人口控制的时期。这个时候期盼积分简直天方夜谭，不说分数线到底怎么定，就上面提到的入籍不得超过45岁，并且持有居住证连续7年的条件，就会让此时45-7=38岁以上（也就现在78后）的永远没有资格。这是无差别刷掉整整一个时代人的政策。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Recognize a Brilliant/awful Company]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/09/how-to-recognize-a-brilliant-slash-awful-company/"/>
    <updated>2016-01-09T13:43:35+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/09/how-to-recognize-a-brilliant-slash-awful-company</id>
    <content type="html"><![CDATA[<p>How to define &ldquo;brilliant&rdquo; or &ldquo;awful&rdquo;?
Can I say I am losing myself in an organisation, and then I define this organisation is awful? My answer is yes. What can be worse than something which is wasting you life? This is the biggest sin of organisztions, and this is also your biggest sin for not leaving it right now.
Maybe someone say my opinion is too emotional,no one can define a company through one people&rsquo;s pointview. But think about it for few minutes, If a company cann&rsquo;t let you close your life meaning, what&rsquo;s the meaning of it to you? Although it let your colleagues rich or important, but they are not you, it is still meanless for you. We are all born as indenpendent human in the world, we want to use our power to let our own or others happer. And this is the only purpose of companise for us.</p>

<h2>reference</h2>

<ul>
<li>《阿里巴巴》</li>
<li>《How Goole Works》</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Are You Purchasing Now?]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/07/purpose-of-jobs/"/>
    <updated>2016-01-07T22:56:42+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/07/purpose-of-jobs</id>
    <content type="html"><![CDATA[<h1>rules</h1>

<ol>
<li>Total grade must be 100:sum(grade)&lt;=100</li>
<li>Grade of evey item must less than or equal to 10 and bigger than 0: 0&lt;=grade&lt;=10</li>
</ol>


<table>
<thead>
<tr>
<th> purpose </th>
<th> 2016</th>
</tr>
</thead>
<tbody>
<tr>
<td>position </td>
<td>   10</td>
</tr>
<tr>
<td>scale    </td>
<td>   10</td>
</tr>
<tr>
<td>team     </td>
<td>   10</td>
</tr>
<tr>
<td>industry </td>
<td>   7</td>
</tr>
<tr>
<td>salary   </td>
<td>   9</td>
</tr>
<tr>
<td>place    </td>
<td>   6</td>
</tr>
<tr>
<td>dailyTime</td>
<td>    6</td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[网络编程中的服务器模型]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/05/networking-server/"/>
    <updated>2016-01-05T22:14:11+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/05/networking-server</id>
    <content type="html"><![CDATA[<p>网络编程中的服务器模型根据接受请求和处理请求的方法来分，大方向分为阻塞模型和非阻塞模型。像redis这种服务使用的是非阻塞模型。而根据服务器对请求派生的进程或者线程方式，模型又分为单进程或线程和多进程或线程。下面依次讲解这几种经典模型：</p>

<h2>单进程的阻塞模型</h2>

<p>这是服务器模型中最为简单的模型，当然处理客户端请有的效率也是最低的。该模型是启动一个socket进程，每来一个请求就处理一个，如果同时有多个请求，只处理最先到达的请求，其他的请求处于阻塞状态直到前一个请求处理完成。尽管这个模型很简单，但是理解其他网络服务器模型的基石。其参考代码如下(代码下载：)：</p>

<p>下面的例子的功能是把服务端的时间传送给客户端：</p>

<pre><code>服务端程序：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span><span class="n">bin</span><span class="p">,</span><span class="n">connfd</span><span class="p">,</span><span class="n">lisfd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">sevr_addr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">time_t</span> <span class="n">ticks</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sevr_addr</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">sevr_addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_family</span><span class="o">=</span><span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span><span class="o">=</span><span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_port</span><span class="o">=</span><span class="n">htons</span><span class="p">(</span><span class="n">SERVER_PORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sockfd</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_STREAM</span><span class="p">,</span><span class="n">IPPROTO_TCP</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">sockfd</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;socket failed&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bin</span><span class="o">=</span><span class="n">bind</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">sevr_addr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">sevr_addr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">bin</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;bind failed&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lisfd</span><span class="o">=</span><span class="n">listen</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span><span class="n">QUEUE_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">lisfd</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;listen failed&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">connfd</span><span class="o">=</span><span class="n">accept</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="n">ticks</span><span class="o">=</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;send time:%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ticks</span><span class="p">);</span>
</span><span class='line'>      <span class="n">snprintf</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">buff</span><span class="p">),</span><span class="s">&quot;%.24s</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ctime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ticks</span><span class="p">));</span>
</span><span class='line'>      <span class="n">write</span><span class="p">(</span><span class="n">connfd</span><span class="p">,</span><span class="n">buff</span><span class="p">,</span><span class="n">strlen</span><span class="p">(</span><span class="n">buff</span><span class="p">));</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">connfd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>该例子中，只启用了一个accept来接受客户端的请求连接，每次只处理一个请求。其他的请求则按照FIFO的原则排入队列中，队列的大小是作为listen函数的第二个参数通知系统的。关于socket编程，参考《unix网络编程》。

客户端程序：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="n">MAXLINE</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">sevr_addr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">((</span><span class="n">sockfd</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_STREAM</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;socket error&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sevr_addr</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">sevr_addr</span><span class="p">));</span>
</span><span class='line'>        <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_family</span><span class="o">=</span><span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>        <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_port</span><span class="o">=</span><span class="n">htons</span><span class="p">(</span><span class="n">SERVER_PORT</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">inet_pton</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="o">&amp;</span><span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">)</span><span class="o">&lt;=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;can not reach the address&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">connect</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">sevr_addr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">sevr_addr</span><span class="p">))</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;can not connect&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">while</span><span class="p">((</span><span class="n">n</span><span class="o">=</span><span class="n">read</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span><span class="n">buff</span><span class="p">,</span><span class="n">MAXLINE</span><span class="p">))</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="n">buff</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span><span class="p">(</span><span class="n">fputs</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="n">stdout</span><span class="p">)</span><span class="o">==</span><span class="n">EOF</span><span class="p">)</span>
</span><span class='line'>                        <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;fputs error&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">n</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;read error&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<pre><code>下面的模型，变化的只是服务端程序，客户端的程序是不变得。
</code></pre>

<h2>一个进程或者线程一个请求模型</h2>

<p>这种模型是在单进程模型的基础上，对每个请求派生一个专属的进程。由于是多进程或者线程，这种模型是可以同时处理多个请求。但是这种模型存在派生进程过多，导致服务器崩溃的危险情况。同时由于大量的进程或者线程的生成和销毁，会耗费大量的cpu资源。而其他高级模型就是解决这种情况而演变出来的。其编程的核心是在单进程模型上利用fork函数。</p>

<pre><code>服务端代码示例：
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include&lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include&lt;netinet/in.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define MAXLINE 100</span>
</span><span class='line'><span class="cp">#define SERVER_PORT 12345</span>
</span><span class='line'><span class="cp">#define QUEUE_SIZE 1</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">fatal</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">msg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">msg</span><span class="p">);</span>
</span><span class='line'>  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span><span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span><span class="n">bin</span><span class="p">,</span><span class="n">connfd</span><span class="p">,</span><span class="n">lisfd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">buff</span><span class="p">[</span><span class="n">MAXLINE</span><span class="p">];</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">sevr_addr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">time_t</span> <span class="n">ticks</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">pid_t</span> <span class="n">pid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sevr_addr</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">sevr_addr</span><span class="p">));</span>
</span><span class='line'>  <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_family</span><span class="o">=</span><span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span><span class="o">=</span><span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sevr_addr</span><span class="p">.</span><span class="n">sin_port</span><span class="o">=</span><span class="n">htons</span><span class="p">(</span><span class="n">SERVER_PORT</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sockfd</span><span class="o">=</span><span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span><span class="n">SOCK_STREAM</span><span class="p">,</span><span class="n">IPPROTO_TCP</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">sockfd</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;socket failed&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">bin</span><span class="o">=</span><span class="n">bind</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">sevr_addr</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">sevr_addr</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">bin</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;bind failed&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">lisfd</span><span class="o">=</span><span class="n">listen</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span><span class="n">QUEUE_SIZE</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">lisfd</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">fatal</span><span class="p">(</span><span class="s">&quot;listen failed&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="n">connfd</span><span class="o">=</span><span class="n">accept</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span><span class="nb">NULL</span><span class="p">,</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">((</span><span class="n">pid</span><span class="o">=</span><span class="n">fork</span><span class="p">())</span><span class="o">==</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>          <span class="n">close</span><span class="p">(</span><span class="n">lisfd</span><span class="p">);</span><span class="cm">/*why?*/</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">ticks</span><span class="o">=</span><span class="n">time</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;send time:%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ticks</span><span class="p">);</span>
</span><span class='line'>          <span class="n">snprintf</span><span class="p">(</span><span class="n">buff</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">buff</span><span class="p">),</span><span class="s">&quot;%.24s</span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">ctime</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ticks</span><span class="p">));</span>
</span><span class='line'>          <span class="n">write</span><span class="p">(</span><span class="n">connfd</span><span class="p">,</span><span class="n">buff</span><span class="p">,</span><span class="n">strlen</span><span class="p">(</span><span class="n">buff</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;sleep for 10 seconds...</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          <span class="n">sleep</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
</span><span class='line'>          <span class="n">printf</span><span class="p">(</span><span class="s">&quot;the connect is over.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>          
</span><span class='line'>          <span class="n">close</span><span class="p">(</span><span class="n">connfd</span><span class="p">);</span>
</span><span class='line'>          <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">connfd</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java 项目构建过程]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/05/java-project-orangnism/"/>
    <updated>2016-01-05T22:11:30+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/05/java-project-orangnism</id>
    <content type="html"><![CDATA[<h2>单个文件的编译</h2>

<p>HelloWorld.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span> <span class="c1">//the class name must the same as file name case sensitivly</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">&quot;hello world!\n&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">10</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="s">&quot;\n&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>shell>javac HelloWorld.java       产生HelloWorld.class文件
shell>java HelloWorld             执行HelloWorld.class</p>

<h2>多个文件的编译</h2>

<p>不过实际中只有一个文件的项目几乎不会出现，现在我们衍生到2个文件的组织和编译。
- 先看第一种情况：所有文件都放在同一个文件夹中，即所有java文件都是平级的。这种编译和一个文件编译方法是一样的，直接编译入口java文件（包含main函数）即可。编译器会自动在当前目录寻找引入类的定义。</p>

<p>HelloWorld.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">DogWorld</span> <span class="n">dg</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DogWorld</span><span class="o">();</span>
</span><span class='line'>        <span class="n">dg</span><span class="o">.</span><span class="na">setname</span><span class="o">(</span><span class="s">&quot;Mr Steph&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">dgname</span><span class="o">=</span><span class="n">dg</span><span class="o">.</span><span class="na">getname</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;hello %s!\n&quot;</span><span class="o">,</span><span class="n">dgname</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>DogWorld.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DogWorld</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">dogname</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setname</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">dogname</span><span class="o">=</span><span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getname</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">dogname</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>shell>javac HelloWorld.java     <code>产生HelloWorld.class文件</code>
shell>java HelloWorld           <code>执行HelloWorld.class</code></p>

<ul>
<li>第二种：当工程的文件达到上千个，放在同一个文件有开始有损工程可读性了，这是开始使用子文件夹来对代码文件模块化组织。</li>
</ul>


<p>现在我们把DogWorld放入到一个animal文件夹中，工程文文件目录如下：
- HelloWorld.java
- animal
- DogWorld.java</p>

<p>HelloWorld.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">animal.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloWorld</span><span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
</span><span class='line'>        <span class="n">DogWorld</span> <span class="n">dg</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">DogWorld</span><span class="o">();</span>
</span><span class='line'>        <span class="n">dg</span><span class="o">.</span><span class="na">setname</span><span class="o">(</span><span class="s">&quot;Mr Steph&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">dgname</span><span class="o">=</span><span class="n">dg</span><span class="o">.</span><span class="na">getname</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">&quot;hello %s!\n&quot;</span><span class="o">,</span><span class="n">dgname</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意HelloWorld.java多了一行import animal.*代码，用于指定要引入的package。</p>

<p>animal/DogWorld.java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">animal</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">DogWorld</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">dogname</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setname</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">dogname</span><span class="o">=</span><span class="n">name</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getname</span><span class="o">()</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">dogname</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>DogWorld.java也多了一行package animal，指定把这个类打入到animal package中，否则DogWorld将被打入默认package中。</p>

<p>一下子多出来package和import的概念，我们还是先来探索package，这个给文件指定路径的机制。</p>

<p><strong>我们先规定一个概念：工程根目录——这个目录的定义是包含main函数的文件的package指定的目录，如果入口文件没有package那么默认就是文件当前所在目录。例如我们的HelloWorld.java没有指定package， 那么根目录就是./</strong></p>

<p>  当java文件中没有使用package显示指定它属于那个包的时候，它默认是属于根目录的包的，而且不管这个java文件是放在哪里。而显示指定package的时候，它又一定规则，即报名必须和文件的放的位置匹配。如果package animal，那么这个java文件就必须放入到相对于根目录的animal目录下。这样做的一个用处——源文件和中间文件路径可以分离。
  javac的寻找类级别是先寻找xxx.class文件，如果没有那么再寻找xxx.java文件现编译xxx.class。而package其实指定xxx.class文件的路径的，而不是xxx.java文件。</p>

<p>例如上面的例子，你也可以这样编译：
shell>cd animal; javac DogWorld.java  <code>用来生产DogWorld.class文件</code>
shell>cd ../     <code>到工程根目录</code>
shell>javac HelloWorld.java
shell>java HelloWorld</p>

<p>假如你把DogWorld.java的package去掉，那么相当于你是想表达把DogWorld.class放到根目录上去。执行步骤是这样的。
shell>cd animal; javac DogWorld.java  <code>用来生产DogWorld.class文件</code>
shell> mv DogWorld.class ../   <code>把DogWorld.class移动到工程根目录去</code>
shell>cd ../
shell>javac HelloWorld.java
shell>java HelloWorld</p>

<p>而import是用来引入class文件的。它很简单，import xxx，完全就按照xxx来寻找。xxx的写法规则是用.来表示文件的层次。如com.animal那么就再相对于工程根目录的com/animal文件夹。</p>

<p>有趣的是package和import的都是相对于根目录的路径，和代码文件本身所在目录完全无关，只和工程根目录有关。</p>

<p>这些引用规则和c中#include使用大为不同。</p>

<h2>虚拟机是如何定位类</h2>

<p>接下来我们来仔细探讨下虚拟机的定位规则。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx反向代理配置]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/05/nginx-proxy/"/>
    <updated>2016-01-05T22:04:29+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/05/nginx-proxy</id>
    <content type="html"><![CDATA[<h2>什么是代理</h2>

<p>代理在普通生活中的意义就是本来应该你做的事情，你让别人代你做了，那么那个帮你做的人就是你的代理。而在计算机网络中代理的概念差不多，就是本来要客户端要做的网络访问，现在移交给另外一个机器做，那么那个机器就被称为代理服务器，代理服务器帮你来访问。过程如下：</p>

<p>正常情况：
client &mdash;(send request)&mdash;> server</p>

<p>代理情况：
client &mdash;(send request)&mdash;> clinet proxy &ndash;(send request)&mdash;> server</p>

<h2>什么又是反向代理</h2>

<p>那什么又是反向代理呢？反向代理可不是说本来代理你事务的人，反过来代理别人。反向代理在计算机网络中是指这么一个过程。一般来说正向代理是客户机找人来代理把自己的请求转发给服务端，但是如果反向代理，找代理的人不再是客户机，而是服务器这边把自己接受的请求转发给背后的其他机器。其主要区别：</p>

<ul>
<li>正向代理中代理的过程是客户端，代理机器是作为一个访问客户的身份的；而在反向代理中代理机器是作为服务身份。</li>
<li>正向代理中代理的过程是服务端，服务端对代理的存在无感知；而在反向代理中客户机对代理的存在无感知。</li>
</ul>


<p>反向代理情况：
clinet &ndash;(send request)&ndash;> server proxy &ndash;(send request)&ndash;>other
server</p>

<h2>先让我们看看一个示例</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#① part start
</span><span class='line'>#运行nginx进程的账户
</span><span class='line'>user www;
</span><span class='line'>#
</span><span class='line'>worker_process 1;
</span><span class='line'>error_log /var/log/nginx/error.log
</span><span class='line'>pid /var/run/nginx.pid;
</span><span class='line'>
</span><span class='line'>events{
</span><span class='line'>  use epoll;
</span><span class='line'>  worker_connections 1024;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>http{
</span><span class='line'>    include       /etc/nginx/mime.types;
</span><span class='line'>    default_type  application/octet-stream;
</span><span class='line'>    access_log  /var/log/nginx/access.log  main;
</span><span class='line'>    #
</span><span class='line'>    sendfile        on;
</span><span class='line'>    #
</span><span class='line'>    keepalive_timeout  65;
</span><span class='line'>    gzip  on;
</span><span class='line'>   
</span><span class='line'>    index   index.html index.htm;
</span><span class='line'>    include /etc/nginx/conf.d/*.conf;
</span><span class='line'>    include /etc/nginx/sites-enabled/*;
</span><span class='line'>    #② part start
</span><span class='line'>      # 定义上游服务器列表组
</span><span class='line'>    upstream web1 {
</span><span class='line'>        server 127.0.0.1:111 weight=1;
</span><span class='line'>        server 127.0.0.1:222 weight=1;
</span><span class='line'>    }
</span><span class='line'>    upstream web2 {
</span><span class='line'>        server 127.0.0.2:111 weight=1;
</span><span class='line'>        server 127.0.0.2:222 weight=6;
</span><span class='line'>        server 127.0.0.2:333 weight=7;
</span><span class='line'>    }
</span><span class='line'>    #定义一个服务器，其监听80端口，配置的域名是www.company.com
</span><span class='line'>    server{
</span><span class='line'>      listen 80;
</span><span class='line'>      # using www  domain to access the main website
</span><span class='line'>      server_name www.company.com;
</span><span class='line'>      access_log  /var/log/nginx/www.log
</span><span class='line'>      
</span><span class='line'>      location / {
</span><span class='line'>          root /home/website_root;
</span><span class='line'>          
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>    #③ part start
</span><span class='line'>    #定义第二个服务器，其同样监听80端口，但是匹配域名是web.company.com
</span><span class='line'>    server{
</span><span class='line'>      listen 80;
</span><span class='line'>      # using web sub domain to access
</span><span class='line'>      server_name web.company.com;
</span><span class='line'>      access_log  /var/log/nginx/web_access.log
</span><span class='line'>      
</span><span class='line'>      location / {
</span><span class='line'>          root /home/web2_root;
</span><span class='line'>          proxy_pass http://127.0.0.1:8080/web/;
</span><span class='line'>          proxy_read_timeout 300;
</span><span class='line'>          proxy_connect_timeout 300;
</span><span class='line'>          proxy_redirect     off;
</span><span class='line'>
</span><span class='line'>          proxy_set_header   X-Forwarded-Proto $scheme;
</span><span class='line'>          proxy_set_header   Host              $http_host;
</span><span class='line'>          proxy_set_header   X-Real-IP         $remote_addr;
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>    #定义第三个服务器，其同样监听80端口，但是匹配域名是web1.company.com，并把请求转发到web1上游服务
</span><span class='line'>    server{
</span><span class='line'>      listen 80;
</span><span class='line'>      # using web1 sub domain to access
</span><span class='line'>      server_name web1.company.com;
</span><span class='line'>      access_log  /var/log/nginx/web1_access.log
</span><span class='line'>      
</span><span class='line'>      location / {
</span><span class='line'>          root /home/web1_root;
</span><span class='line'>          proxy_pass http://web1;
</span><span class='line'>          proxy_read_timeout 300;
</span><span class='line'>          proxy_connect_timeout 300;
</span><span class='line'>          proxy_redirect     off;
</span><span class='line'>
</span><span class='line'>          proxy_set_header   X-Forwarded-Proto $scheme;
</span><span class='line'>          proxy_set_header   Host              $http_host;
</span><span class='line'>          proxy_set_header   X-Real-IP         $remote_addr;
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>        #定义第三个服务器，其同样监听80端口，但是匹配域名是web2.company.com，并把请求转发到web2上游服务
</span><span class='line'>    server{
</span><span class='line'>      listen 80;
</span><span class='line'>      # using web2 sub domain to access
</span><span class='line'>      server_name web2.company.com;
</span><span class='line'>      access_log  /var/log/nginx/web2_access.log
</span><span class='line'>      
</span><span class='line'>      location / {
</span><span class='line'>          root /home/web2_root;
</span><span class='line'>          proxy_pass http://web2;
</span><span class='line'>          proxy_read_timeout 300;
</span><span class='line'>          proxy_connect_timeout 300;
</span><span class='line'>          proxy_redirect     off;
</span><span class='line'>
</span><span class='line'>          proxy_set_header   X-Forwarded-Proto $scheme;
</span><span class='line'>          proxy_set_header   Host              $http_host;
</span><span class='line'>          proxy_set_header   X-Real-IP         $remote_addr;
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h3>这个示例都做了什么</h3>

<ol>
<li>第①部分，定义nginx通用规则，包括运行账户，处理进程个数等</li>
<li>第②部分，开始定义上游服务器组</li>
<li>第③部分，定义server，并指定怎么使用第②部分定义的upstream</li>
</ol>


<p>总体来说就是这个提供了4个服务，www，web，web1，web2 4个网站。这个例子很适合只有一台机器，但是有想避免url中携带端口号，统一使用域名的方式访问。4个网站都监听80端口，但是分配不同的二级域名既可以。这就需要nginx的反向代理，把接到的请求转发给背后不同的服务。</p>

<h2>为什么需要方向代理</h2>

<p>为什么要反向代理？作用服务端的代理，自然就是一台服务器处理不过来了，需要转发、分散请求给其他服务器做。下面罗列些适用场景：</p>

<ul>
<li><p>负载均衡
上面例子中的web1和web2使用了nginx的负载均衡技术，把请求转向一组服务器。具体转发到哪个服务器，nginx提供了多种负载策略，例子中使用的是加权重的方式，web1 upstream是2个请求中，1个请求给111服务器，1个给222服务器。关于跟多的负载均衡的策略，请参看<a href="http://nginx.org/en/docs/http/load_balancing.html">nginx官方文档-负载均衡</a></p></li>
<li><p>一个域名，多个网站。在这里反向代理倒不是为了负责存在，而是为了域名和服务的统一部署。例如一个公司的内部网站需要搭建很多服务——代码管理服、wiki服务、oa……，但是只要一个域名。这时候就可以用反向代理把不同的子域名转发到不同的服务上。下面是一个例子：</p></li>
<li><p>当然反向代理的另一大用处就是隐藏后面的实际服务，以此来达到一定的安全性。</p></li>
</ul>


<h2>仔细讲解每个模块</h2>

<h3>user</h3>

<p>user 设置nginx是以什么用户来运行的，这个非常重要，<strong>确保运行nginx的用户能有权限访问读写网站的文件</strong>,否则会报404 not found等错误。</p>

<h3>events</h3>

<h3><a href="http://nginx.org/cn/docs/http/ngx_http_upstream_module.html">nginx upstream</a></h3>

<p>upstream 直接翻译就是上游，即上游服务，其封装一组服务器列表，这些服务器可以别proxy_pass,fastcgi_pass,uwsgi_pass,scgi_pass和 memcached_pass引用，把接到的请求转发给这些服务器组。
引用方法就是加行<a href="http://">http://</a>[upstream module name]</p>

<pre><code>&gt; The ngx_http_upstream_module module is used to define groups of servers that can be referenced by the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, and memcached_pass directives.
</code></pre>

<p>例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upstream  backend {  #①
</span><span class='line'>    server backend1.example.com       weight=5;
</span><span class='line'>    server backend2.example.com:8080;
</span><span class='line'>    server unix:/tmp/backend3;
</span><span class='line'>
</span><span class='line'>    server backup1.example.com:8080   backup;
</span><span class='line'>    server backup2.example.com:8080   backup;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server {
</span><span class='line'>    location / {
</span><span class='line'>        proxy_pass http://backend; #②
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>注意有①，和②行的写法。要引用<strong>backend</strong>模块，只需把它制定成**<a href="http://backend**%E5%B0%B1%E8%A1%8C%E3%80%82">http://backend**%E5%B0%B1%E8%A1%8C%E3%80%82</a></p>

<h3>http 意义和配置</h3>

<p>http就是指配置关于http服务的地方，server等都是http的子模块</p>

<h3>server 配置和匹配规则</h3>

<p>一个http服务可以有多个server，而对server的路径匹配，反向代理都是在这里配置的。</p>

<p>在server中最重要的一项配置：server_name的配置。server_name决定了来了一个url，到底是哪个server处理该请求。nginx会依次找和url配置的第一次出现的server。server_name可以使用通配符，也可以使用正则表达式。而且一个server的server_name可以多个，以空格分隔。更详细的关于server_name匹配规则，<a href="http://nginx.org/en/docs/http/server_names.html">参看这里</a></p>

<h3>location 配置和匹配规则</h3>

<p>server_name是定义域名级别的规则，而location则是url中文件部分的规则的。适应例如会对图片等静态资源做单独处理等需求。</p>

<h2>参考资料</h2>

<ul>
<li><a href="http://nginx.org/cn/docs/http/ngx_http_upstream_module.html">nginx upstream模块介绍文档1</a></li>
<li><a href="http://tengine.taobao.org/book/chapter_05.html">nginx upstream模块介绍文档2</a></li>
<li><a href="http://www.cnblogs.com/xiaogangqq123/archive/2011/03/02/1969006.html">nginx配置例子</a></li>
<li><a href="http://nginx.org/en/docs/http/load_balancing.html">nginx load balancer</a></li>
<li><a href="http://nginx.com/blog/nginx-plus-r6-released/?_ga=1.99990941.241485225.1426074750">Enhanced Load Balancing,High Availability, and Monitoring Features</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[100 Open Source Operating System Papers for Programmers.]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/01/100-open-source-operating-system-papers-for-programmers/"/>
    <updated>2016-01-01T18:32:21+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/01/100-open-source-operating-system-papers-for-programmers</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015非正式总结报告]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/01/2015-annual-report/"/>
    <updated>2016-01-01T11:48:49+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/01/2015-annual-report</id>
    <content type="html"><![CDATA[<h2>还是先吐槽吧</h2>

<p>为什么我这么讨厌写季度总结或者职称评定这些材料？为什么在夸自己成果的时候，反而觉得这些是麻烦？是因为写了太多次这种东西后，发现依然没有什么用处吗（确实，写了这么多次，绩效被评了C，职称升级也无望，对于这些过场的无用的东西，谁还有激情去写，想想一开始入职公司的时候多有动力去写这些东西啊）？还是因为发现自己并没有什么可称赞的工作成果？总之想想这些无聊的东西就痛苦。</p>

<p>但不管怎么样，或者什么原因，我还是要写的。也许我该找一个动力去完成这项任务，让我摆脱或者减轻我的痛苦。</p>

<p>就当是人生记录吧！人生的一个阶段记录。好好写，过3～5年(可能一点兴趣都没有，我现在就一点都不想看自己一年前的各种总结。包括那份很傻的职称评定。不管怎么样，还是先写吧！)再拿出来看，我自己一定会庆幸自己记录这些，就像我的日记一样。</p>

<p>远离那些伤害我的人，一定要果断，一旦判断某人伤害过我，一定毫不犹豫的断绝任何和此人的关系，并且阻断任何联系方式。</p>

<p>在不知道前进方向的时候如何继续前进？或者在巨大的心里抵触的情况下，怎么进入工作状态？</p>

<p>怎么克服别人对自己的能力否定？</p>

<h2>输入性知识总结</h2>

<h3>对机器学习做了初步的了解</h3>

<h3>《计算的解析与构造》和《计算的本质》</h3>

<h3>《computer system: a prospective of a programmer》</h3>

<h3>操作系统</h3>

<h3>java语言学习和平行编程</h3>

<h2>输出性项目</h2>

<p>这方面太失败，计划要做的myCompiler，myZip都没有任何输出性成果。只是读了一本书的前面几章。
- myZip
- myCompiler</p>

<h2>第二天性技能</h2>

<ul>
<li>写作演讲基本机构技能：批判性思考方式</li>
<li>谈判技能</li>
<li>决策技能</li>
<li>基本沟通技能</li>
</ul>


<h2>创造散发性技能</h2>

<h2>工作总结</h2>

<p>在多盟的这两年内，非常遗憾的只有一项成就——saiku。</p>

<h2>此阶段最重要的3个问题</h2>

<h2>2016的书单</h2>

<p>目标就是至少能设计实现一个自己的分布式数据储存软件——myDB。</p>

<h3>数据库设计与实现</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Career Decision Tree]]></title>
    <link href="http://woodcarver.github.io/blog/2015/12/30/my-career-decision-tree/"/>
    <updated>2015-12-30T22:32:30+08:00</updated>
    <id>http://woodcarver.github.io/blog/2015/12/30/my-career-decision-tree</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Learn a Programming Language]]></title>
    <link href="http://woodcarver.github.io/blog/2015/12/28/how-to-learn-a-programming-language/"/>
    <updated>2015-12-28T10:20:32+08:00</updated>
    <id>http://woodcarver.github.io/blog/2015/12/28/how-to-learn-a-programming-language</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[吐槽时间]]></title>
    <link href="http://woodcarver.github.io/blog/2015/12/18/i-cant-help/"/>
    <updated>2015-12-18T17:11:40+08:00</updated>
    <id>http://woodcarver.github.io/blog/2015/12/18/i-cant-help</id>
    <content type="html"><![CDATA[<p>我实在是忍不住了，我要吐槽！
为什么读java代码的这么费劲。一层一层的拨开后发现，他们使用的是接口，然后你就发现如果不向上追踪代码根本不可能知道到底是传递了那个具体类，从而更不知道具体的处理逻辑是什么。何谈修改其中逻辑？《代码大全》里说，如果你使用他们的接口，发现不懂应该要求其作者改动,那是针对使用者来说。但是你是这个接口是新的接手人，要改变具体的逻辑，呵呵，那就等着哭吧！
每次看代码都有种被骗，被忽悠的感觉。</p>

<ol>
<li>老板今天要我给系统升级，增加一个显示用户闪亮亮的脑门大小</li>
<li>找到显示用户信息的function，它调用了一个人类,很简单，我点进去看看人类</li>
<li>点进去看，发现人类是个interface。好吧，这意味着我向上回滚看showUserProfile()的人类参数是什么时候实现。发现一个createPeople()</li>
<li>看了五六层，总算找到showUserProfile()里的人类是从那里开始产生的了。为了这个又走了一遍分支。不管怎么着，先看看createPeople()，发现人类又分了凡人，超人和坏人。然后点进凡人看看，发现又是一个接口扩展于人类。算了，那放放，不想再跑其他分支看createPeople()里的凡人到底是那个具体类。那我们再看看超人吧！发现超人和坏人是扩展于凡人的另一接口。。。。［摔桌子了！］</li>
</ol>


<p>看了这么多，又都好像啥都没看到。你以为了解人类，呵呵，其实你不了解任何一种人类。全是浮云。。。
实在不明白，明明就一个实现类还要用接口干什么？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mondrian 设计于实现:Dialect 设计]]></title>
    <link href="http://woodcarver.github.io/blog/2015/11/30/mondrian-design-dialect-design/"/>
    <updated>2015-11-30T22:56:19+08:00</updated>
    <id>http://woodcarver.github.io/blog/2015/11/30/mondrian-design-dialect-design</id>
    <content type="html"><![CDATA[<p>Dialect 模块是mondrian属于spi模块，主要作用用于支持跨平台支持各种关系性数据库。其基本设计理念使用了抽象工厂模型（abstract factory）。但是在上层有提供了一层抽象通过配置而不修改代码来实现自动根据加载的驱动来调用相应的Dialect，实现sql的兼容支持。</p>

<p>我觉得如果要描述出来了解其中的机制，更需要回答下面3个问题，其实可以算2个，第一个问题拆开了就是后面那两个。
为什么这么设计？有什么优点？有什么缺点？</p>

<p>其中涉及到的类有：</p>

<ul>
<li>mondrian.rolap.RolapConnection</li>
<li>mondrian.spi.DialectManager</li>
<li>mondrian.spi.DialectManager.DialectManagerImpl</li>
<li>mondrian.spi.DialectManager.ChainDialectFactory</li>
<li>mondrian.util.ServiceDiscovery<T></li>
<li>mondrian.spi.Dialect</li>
<li>mondrian.spi.DialectFactory</li>
<li>mondrian.spi.impl.JdbcDialectFactory</li>
<li>mondrian.spi.impl.JdbcDialectImpl</li>
<li>mondrian.spi.impl.VerticaDialect</li>
</ul>


<p>现在辨别其中的参与者的角色：</p>

<ul>
<li>client

<ul>
<li>mondrian.rolap.RolapConnection</li>
</ul>
</li>
<li>抽象工厂

<ul>
<li>mondrian.spi.DialectFactory</li>
</ul>
</li>
<li>具体工厂实现

<ul>
<li>mondrian.spi.impl.JdbcDialectFactory</li>
</ul>
</li>
<li>产品抽象接口

<ul>
<li>mondrian.spi.Dialect</li>
</ul>
</li>
<li>具体产品

<ul>
<li>mondrian.spi.impl.JdbcDialectImpl</li>
<li>mondrian.spi.impl.VerticaDialect</li>
</ul>
</li>
</ul>


<p>这个模型的基本模型中还包括了管理者（mondrian.spi.DialectManager），除此之还有一个特殊支持是并没有给每个具体产品一个具体的工厂实现，而是所有的具体产品公用一个工厂——mondrian.spi.impl.JdbcDialectFactory。其中是通过传递给工厂参数来控制返回那个产品。</p>

<p>公用一个工厂的好处是增大了代码的复用，显然写一大堆createDielact方法，而body中仅仅只是几行代码不同很烦人。而且每增加一个关系性数据库就需要增加一个具体工厂。
具体步骤：</p>

<ul>
<li>RolapConnection调用DialectManager.createDialect</li>
<li>DialectManager通过createDialect方法把任务传递给其私有内部类DialectManagerImpl。在这个类的构造函数中利用ServiceDiscovery类拿到所有的可能的数据库产品列表（读取的是"META-INF/services/mondrian.spi.Dialect文件的列表，注意的代码final List&lt;Class<Dialect>> dialectClasses=ServiceDiscovery.forClass(Dialect.class).getImplementor();）</li>
<li>而且实际执行方法DialectManagerImpl.createDialect 根据传进来的dialectClassName来是实例化factory，如果dialectClassName为null，而默认是初始化一个CachingDialectFactory</li>
<li>ChainDialectFactory内部实际由ServiceDiscovery传递过来的factory列表，最终轮询数据库设备列表调用JdbcDialectFactory直到找到合适的Dialect</li>
<li>JdbcDialectFactory根据dataSource和connection的属性再透过JdbcDialectImpl来生层一个具体xxxDialect</li>
</ul>


<p>作为一个现在还没有“习惯Java编程”的初学者而言，mondrian源码中有许多我非常看不惯的设计。比如下面的循环调用：</p>

<ul>
<li>mondrian.spi.impl.JdbcDialectFactory.createDialectHelper()</li>
<li>mondrian.spi.impl.JdbcDialectFactory.createDialect()</li>
</ul>


<h2>使用</h2>

<p>通过上面的步骤很清楚的知道怎么去扩展一个数据库了。</p>

<ul>
<li>修改META-INF/services/mondrian.spi.Dialect，添加要支持的数据库的驱动（注意打包的时候一定要把META_INF放进去）</li>
<li>在mondrian.spi包下添加的Dialect</li>
<li>JdbcDialectImpl.getProduct()增加对应关系（该产品的JDBC 的metaDate.getDatabaseProductName返回的名称和Dialect 的databaeProduct的对应关系必须在JdbcDialectImpl.getProduct(productName, productVersion)定义）</li>
<li>然后重新编译，部署就完成了</li>
</ul>


<h2>子模块设计</h2>

<h3>输出类型控制（guessType的实现）</h3>

<h2>吐槽时间</h2>

<p>这两个函数居然是互相引用的，一开始看源代码根部搞不清楚到底在到底谁是入口，谁是中间过程。我贴出这两个函数的源代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Dialect</span> <span class="nf">createDialectHelper</span><span class="o">(</span>
</span><span class='line'>        <span class="n">DialectFactory</span> <span class="n">factory</span><span class="o">,</span>
</span><span class='line'>        <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">dataSource</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;Must specify either dataSource or connection&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// DataSource.getConnection does not return null. But</span>
</span><span class='line'>            <span class="c1">// a null value here would cause infinite recursion, so</span>
</span><span class='line'>            <span class="c1">// let&#39;s be cautious.</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">Dialect</span> <span class="n">dialect</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">factory</span><span class="o">.</span><span class="na">createDialect</span><span class="o">(</span><span class="n">dataSource</span><span class="o">,</span> <span class="n">connection</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Close the connection in such a way that if there is a</span>
</span><span class='line'>        <span class="c1">// SQLException,</span>
</span><span class='line'>        <span class="c1">// (a) we propagate the exception,</span>
</span><span class='line'>        <span class="c1">// (b) we don&#39;t try to close the connection again.</span>
</span><span class='line'>        <span class="n">Connection</span> <span class="n">connection2</span> <span class="o">=</span> <span class="n">connection</span><span class="o">;</span>
</span><span class='line'>        <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">connection2</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">dialect</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="n">Util</span><span class="o">.</span><span class="na">newError</span><span class="o">(</span>
</span><span class='line'>                <span class="n">e</span><span class="o">,</span>
</span><span class='line'>                <span class="s">&quot;Error while creating dialect&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">connection</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// ignore</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Dialect</span> <span class="nf">createDialect</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">,</span> <span class="n">Connection</span> <span class="n">connection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// If connection is null, create a temporary connection and</span>
</span><span class='line'>    <span class="c1">// recursively call this method.</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">createDialectHelper</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span> <span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">acceptsConnection</span><span class="o">(</span><span class="n">connection</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InstantiationException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">Util</span><span class="o">.</span><span class="na">newError</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">,</span> <span class="s">&quot;Error while instantiating dialect&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalAccessException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">Util</span><span class="o">.</span><span class="na">newError</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">,</span> <span class="s">&quot;Error while instantiating dialect&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InvocationTargetException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="n">Util</span><span class="o">.</span><span class="na">newError</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">e</span><span class="o">,</span> <span class="s">&quot;Error while instantiating dialect&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>去掉异常等处理，只看主干，变成下面的样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Dialect</span> <span class="nf">createDialectHelper</span><span class="o">(</span>
</span><span class='line'>        <span class="n">DialectFactory</span> <span class="n">factory</span><span class="o">,</span>
</span><span class='line'>        <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Dialect</span> <span class="n">dialect</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createDialect</span><span class="o">(</span><span class="n">dataSource</span><span class="o">,</span> <span class="n">connection</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dialect</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Dialect</span> <span class="nf">createDialect</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">,</span> <span class="n">Connection</span> <span class="n">connection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nf">createDialectHelper</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span> <span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">acceptsConnection</span><span class="o">(</span><span class="n">connection</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>先从createDialect（他的名字最像是入口）入手看，发现他先检查connection，如果是null，那么调用createDialectHelperi，并且返回其返回值。如果connection不为null，再检查其是不是系统可接受（acceptsConnection），然后构造一个具体Dialect类。so far,so good。 再细入看createDialectHelper，发现居然又调用了createDialect，这是坑人吧！createDialect刚把任务交给createDialectHelper没多久，又被扔回来了。这隐藏着深深恶意迂回的递归是怎么回事。能直接点吗？createDialectHelper其实不就是生成了connection递给createDialect，这用得着递归逻辑吗？直接改成下面这种逻辑不就行了嘛，还用递归？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">Dialect</span> <span class="nf">createDialectHelper</span><span class="o">(</span>
</span><span class='line'>        <span class="n">DialectFactory</span> <span class="n">factory</span><span class="o">,</span>
</span><span class='line'>        <span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>    <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Dialect</span> <span class="n">dialect</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">createDialect</span><span class="o">(</span><span class="n">dataSource</span><span class="o">,</span> <span class="n">connection</span><span class="o">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dialect</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="n">Dialect</span> <span class="nf">createDialect</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">dataSource</span><span class="o">,</span> <span class="n">Connection</span> <span class="n">connection</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">connection</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">connection</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span> <span class="n">connection</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">acceptsConnection</span><span class="o">(</span><span class="n">connection</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">constructor</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的线性关系比循环调用好理解多了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Is Model of Data]]></title>
    <link href="http://woodcarver.github.io/blog/2015/11/11/what-is-model-of-data/"/>
    <updated>2015-11-11T22:08:08+08:00</updated>
    <id>http://woodcarver.github.io/blog/2015/11/11/what-is-model-of-data</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aha! Analysis of Algorithms]]></title>
    <link href="http://woodcarver.github.io/blog/2015/10/24/aha-analysis-of-algorithms/"/>
    <updated>2015-10-24T15:15:46+08:00</updated>
    <id>http://woodcarver.github.io/blog/2015/10/24/aha-analysis-of-algorithms</id>
    <content type="html"><![CDATA[<h1>[跨越性发明]算法复杂度分析技术</h1>

<p>关于算法分析技术的介绍，我看到最精彩的文章出自于Robert Sadgewick的《算法》。本书在第一章的介绍性文章给了一些很精彩的算法案例和程序代码后提出让我很震惊的问题:“怎么判断一个算法跑的快不快？”,而且这个问题从头到尾不断重复。我很震惊的原因是我认为既然都知道算法过程，其他的类似与计算步骤这种“附属问题”难道还需要考虑？然后真被问到后，我发现我还真不会。不信，假装大家都事先不知道分析技术，我们来看下面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;types.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">size_t</span> <span class="nf">binary_search</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">arr</span><span class="p">,</span> <span class="kt">int</span> <span class="n">len</span><span class="p">,</span> <span class="kt">int</span> <span class="n">target</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">middle</span><span class="p">;</span>
</span><span class='line'>    <span class="n">left</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">right</span><span class="o">=</span><span class="n">len</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">while</span><span class="p">(</span><span class="n">left</span><span class="o">&lt;=</span><span class="n">right</span><span class="p">){</span>
</span><span class='line'>        <span class="n">middle</span><span class="o">=</span><span class="p">(</span><span class="n">left</span><span class="o">+</span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">target</span><span class="p">]</span><span class="o">==</span><span class="n">arr</span><span class="p">[</span><span class="n">middle</span><span class="p">]){</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">middle</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="k">else</span><span class="p">(</span><span class="n">arr</span><span class="p">[</span><span class="n">target</span><span class="p">]</span><span class="o">&lt;</span><span class="n">arr</span><span class="p">[</span><span class="n">middle</span><span class="p">]){</span>
</span><span class='line'>            <span class="n">right</span><span class="o">=</span><span class="n">middle</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">left</span><span class="o">=</span><span class="n">middle</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的二分查找法，让我们来分析运行时间。
首先反应就是实际运行一下，统计时间不就出来了。好，就这么办。不过当开始动手的时候就发现自己要构建输入，而构建个什么样的输入呢？arr的包括数据长度可以从10个整数到100000整数到无穷大……。从这个问题我们就会强烈的意识到算法的运行时间和输入数据大小直接相关。我们下记下来这条：</p>

<blockquote><p>运行时间和输入数据大小直接相关</p></blockquote>

<p>用更简介的纪录方法：</p>

<blockquote><p>运行时间 ~ 输入数据大小</p></blockquote>

<p>还是不够方便，我们用一种数据方法来记录，这种思想来自于波利亚的<a href="http://www.amazon.cn/%E6%80%8E%E6%A0%B7%E8%A7%A3%E9%A2%98-%E6%95%B0%E5%AD%A6%E6%80%9D%E7%BB%B4%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95-%E6%B3%A2%E5%88%A9%E4%BA%9A/dp/B0011F6OGM/ref=sr_1_1?ie=UTF8&amp;qid=1445674579&amp;sr=8-1&amp;keywords=%E6%80%8E%E4%B9%88%E8%A7%A3%E9%A2%98">怎么解题</a>或者数据建模，这种数学化一个实际问题是我发现找到结果的最强大的工具。T来表示运行时间,arr_len作为时间函数的一个自变量</p>

<blockquote><p>T=f(arr_len)</p></blockquote>

<p>构建完第一参数，我们来构建第二个参数，查那个数呢？Oh，my god!又发现target同样影响查询效率。因为查中间的位置，比查第一个和最后一个元素的时间长多了。这时我们再加一个自变量：tar_pos(target_pos)。</p>

<blockquote><p>T=f(arr_len,tar_pos)</p></blockquote>

<p>后来又因为我开启了一个耗资源的游戏，这个程序居然在同样的参数下跑的慢了。突然有想到了，原来机器的资源不同也是个大因素，这里包括机器拥有的cpu、内存、磁盘等。这时又需要加参数进入我们的函数了。我们叫machine envrionment，简称m_env.</p>

<blockquote><p>T=f(arr_len,tar_pos,m_env)</p></blockquote>

<p>看上面的问题，我们发现要精确进算运行速度，简直是不可能的事，因为有一个非常不容易控制而且我们也不关心的自变量那就是m_env。我们的算法要成功，必须在任何机器上都需要有良好的性能。所以我们开始<strong>简化模型</strong>,那就是开始构建理想机器，其资源全部资源都给我们关心的程序。<code>且假设一个statment所用的时间都是1（没有单位）</code>.这样我们算时间就转化成了算程序使用了多少statment。</p>

<blockquote><p>T=f(arr_len,tar_pos), assumpte every statment takes one time</p></blockquote>

<p>现在基本确定了自变量（怎么知道考虑的自变量够了呢？），我们来细化关系式。
T= 1+1+while里面的步骤。while里面的步骤怎么计算？
假如我们的输入是：0 1 2 3 4 5。那么每个位置对应的运行次数如下图：</p>

<p><img src="../images/posts/binary_search_tree.jpg" alt="bianry_search_tree" /></p>

<p>上图给出的是n=6的情况。树的高hight=log(6)+1=3, t&lt;=hight(todo:能给出t＝f(k)的具体公式吗？参照平衡二叉树的性质)。</p>

<p>给出了这个公式，我们就可以衡量任意参数的时间了。但是如果要对比算优良，就主要看在同样的参数下，谁更快了。现在我们拿出一个顺序查找来对比，我们都知道顺序查找的时间公式：T=tar_pos, 0&lt;=tar_pos&lt;6。 我们从第一个到k位置开始对比，下面列出个表格：</p>

<table>
<thead>
<tr>
<th>算法      </th>
<th>0 </th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
<th>avg</th>
</tr>
</thead>
<tbody>
<tr>
<td>顺序查找法 </td>
<td>0 </td>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>3</td>
</tr>
<tr>
<td>二分法    </td>
<td>3 </td>
<td>2</td>
<td>3</td>
<td>1</td>
<td>3</td>
<td>2</td>
<td>3</td>
<td>2.4</td>
</tr>
</tbody>
</table>


<p>对于上面的长度为6的数组查找我们还能一一列举出来，<code>但是当扩展到任意长度n后呢</code>？我们怎么比较呢？这里又是一个很跨越性的思想——概率统计：比较一组数时，我们使用</p>

<blockquote><p>mean＝∑(k)*t,p(k)指被查找数在k位置的概率，t是该位置耗费的查找时间。</p></blockquote>

<p>而且假定在没有任何前提下，所有位置的概率一样，即p(k)=1/n.</p>

<p>然后具列出具体位置的式子：</p>

<ul>
<li>顺序查找法:t=k/n,mean=(1+n)/2</li>
<li>二分法:t&lt;=log(n)+1,mean&lt;=log(n)+1 (太难精确计算了，所以用了不等式来表示)</li>
</ul>


<p>所以我们来比较t1=(1+n)/2 和 t2=ceil(log(n))+1,发现当n>=8后，t2开始超过t1,而且随着n的增大，他们的差距越来越大。（todo:需要张函数图才能直观说明啊）</p>

<p>而8是个非常小的数，所以对于日常来说，我们大多数都是遇到大于8的情况，所以我们可以直觉判断二分法优于顺序查找法。</p>

<p>从上面我们进步衍生出一个思想，<code>*不断扩充n的范围来观察时间效率的变化</code>。在这里我再插入一个故事：</p>

<p>马上就到北邮的校庆了，北邮人很开心。但是一个北邮人想一个清华的吐槽，我们学校的年龄才是清华的一半。然后另一个北邮人又说了一句：“现在是北邮的年龄是清华的一半，100后是3/4，然后无限年后这两个学校的年龄就相等了。”
这里有个故事蕴含着一个重要的思想就是极限。起始值和常数值会被快增长的部分迅速磨平。</p>

<p>极限思想应用在算法分析中，一个天才的想法就诞生了。在这里产生了一个运算符O。就是一种抛弃增长慢部分的技术。</p>

<blockquote><p>定义：如果存在常数c0和n0，对于所有n>n0,有g(n)&lt;c0f(n),则称函数g(n)是O(f(n))的。</p></blockquote>

<p>即用g(n)来代替f(n)来比较衡量大小。</p>
]]></content>
  </entry>
  
</feed>
