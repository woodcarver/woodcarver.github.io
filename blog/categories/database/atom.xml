<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Database | Wood Carver]]></title>
  <link href="http://woodcarver.github.io/blog/categories/database/atom.xml" rel="self"/>
  <link href="http://woodcarver.github.io/"/>
  <updated>2016-02-18T10:45:47+08:00</updated>
  <id>http://woodcarver.github.io/</id>
  <author>
    <name><![CDATA[Wood Carver]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[介绍vertica]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/13/introduce-vertica/"/>
    <updated>2016-01-13T18:55:49+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/13/introduce-vertica</id>
    <content type="html"><![CDATA[<p>最近olap系统开始上线vertica。话说vertica的速度真实不是盖的，太快了，完全盖过infobright的所有风采，完全不留痕迹！</p>

<h1>vertica的基本架构介绍</h1>

<p>首先定型一下vertica在数据库领域里的分支：
1. 面向批量分析数据(OLAP)
2. 关系型数据库(RDBMS)
3. 面向列式储存(column-store architechture)
4. 分布式(distributed)
按照vertica在官方文档中提到自己的特性：4 c's——<a href="https://my.vertica.com/docs/7.0.x/HTML/index.htm#Authoring/ConceptsGuide/Other/TheHPVerticaApproach.htm%3FTocPath%3DConcepts%2520Guide%7C_____1">Column Storage， Compression，Clustering，Continuous Performance</a>
其中高压缩比这个特性一般是附属于面向列式储存的特性的，不是一个正交属性。</p>

<p>当然类似于mysql，sql server等面向OLTP的数据库，其主要处理事务型数据。而vertica的设计目的已经进入到了另一个领域OLAP（OLTP和OLAP的对比，<a href="">参看这里</a>）。所以相对于OLTP大多数采用row-store的储存架构，OLAP一般会用column-store架构。<a href="">这里可以思考一下为什么会有这样的不同</a>。
上面这些都是一个成型的数据库设计架构选择。需要先了解上面提到的概念，你才可以明白为什么市场上会有如此之多的数据产品，还有vertiac的价值到底在哪里。</p>

<p>一些概念中vertica中也做了相应的变化，接下来我们来看看vertica中的一些重要概念。</p>

<h2>储存设计</h2>

<p>因为Vertica是面向列式储存的数据库，其读取也是按列为单位，其中读取实际单位是projections（作为vertica的FlexStore体系中的一个概念，假如说column-store是为了加快OLAP数据库查询速度的首选，那么FlexStore的存在就是进一步在这基础上从physical design, database storage, and query execution三个方面提升速度）。
其中打破了按表储存的架构，表在vertica中只是一个逻辑概念，其本身还是一个特殊的projections，其物理储存全部用的是projections：
<code>
Projection
Optimized collections of table columns that provide physical storage for data. A projection can contain some or all of the columns of one or more tables. A projection that contains all of the columns of a table is called a super-projection. A projection that joins one or more tables is called a pre-join projection.
</code></p>

<ul>
<li>查看projection
select node_name,wos_row_count,ros_row_count from projection_storage where anchor_table_name=&lsquo;dim_exp&rsquo;;</li>
<li>wos vs ros
<a href="http://vertica-forums.com/viewtopic.php?t=126">http://vertica-forums.com/viewtopic.php?t=126</a></li>
</ul>


<h2>如何hack</h2>

<p>上面讲了很多原理，现在我们就开始动手操作吧，俗话说说的不如做的。</p>

<h3>删除数据——分区的最大用处</h3>

<p>到底使用分区比较好呢？还是用purage_table比较好呢？
果断构建partition好，因为如果用purage对于已经转移好的ros数据块（到底会怎么样？解释不清楚了吧！）速度会很慢。<a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/PURGE_TABLE.htm">https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/PURGE_TABLE.htm</a></p>

<h3>索引到底是个什么鬼</h3>

<h3>查看执行的任务，类似于mysql的show processlist</h3>

<p>SELECT * FROM SESSIONS;</p>

<h3>数据类型</h3>

<p>在vertica中除了对int的定义不同，相比其他储存引擎，vertica的所有整形都是用64bit的，包括tinyint。
在vertica主意使用char的问题，发现当定义char(200),不满200长度的字段，会自动补全空白，这样改变了数据的内容，对于精确搜索时，这是个坑。最好改成varchar，但现在还不明白这个的性能有什么差别。</p>
]]></content>
  </entry>
  
</feed>
