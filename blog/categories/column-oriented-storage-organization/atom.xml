<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Column-oriented-storage-organization | Wood Carver]]></title>
  <link href="http://woodcarver.github.io/blog/categories/column-oriented-storage-organization/atom.xml" rel="self"/>
  <link href="http://woodcarver.github.io/"/>
  <updated>2016-10-07T14:01:42+08:00</updated>
  <id>http://woodcarver.github.io/</id>
  <author>
    <name><![CDATA[Wood Carver]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[介绍vertica]]></title>
    <link href="http://woodcarver.github.io/blog/2016/01/13/introduce-vertica/"/>
    <updated>2016-01-13T18:55:49+08:00</updated>
    <id>http://woodcarver.github.io/blog/2016/01/13/introduce-vertica</id>
    <content type="html"><![CDATA[<p>最近olap系统开始上线vertica。话说vertica的速度真实不是盖的，太快了，完全盖过infobright的所有风采，完全不留痕迹！</p>

<h1>vertica的基本架构介绍</h1>

<p>首先定型一下vertica在数据库领域里的分支：
1. 面向批量分析数据(OLAP)
2. 关系型数据库(RDBMS)
3. 面向列式储存(column-store architechture)
4. 分布式(distributed)
按照vertica在官方文档中提到自己的特性：4 c's——<a href="https://my.vertica.com/docs/7.0.x/HTML/index.htm#Authoring/ConceptsGuide/Other/TheHPVerticaApproach.htm%3FTocPath%3DConcepts%2520Guide%7C_____1">Column Storage， Compression，Clustering，Continuous Performance</a>
其中高压缩比这个特性一般是附属于面向列式储存的特性的，不是一个正交属性。</p>

<p>当然类似于mysql，sql server等面向OLTP的数据库，其主要处理事务型数据。而vertica的设计目的已经进入到了另一个领域OLAP（OLTP和OLAP的对比，<a href="">参看这里</a>）。所以相对于OLTP大多数采用row-store的储存架构，OLAP一般会用column-store架构。<a href="">这里可以思考一下为什么会有这样的不同</a>。
上面这些都是一个成型的数据库设计架构选择。需要先了解上面提到的概念，你才可以明白为什么市场上会有如此之多的数据产品，还有vertiac的价值到底在哪里。</p>

<p>一些概念中vertica中也做了相应的变化，接下来我们来看看vertica中的一些重要概念。</p>

<h2>储存设计</h2>

<p>因为Vertica是面向列式储存的数据库，其读取也是按列为单位，其中读取实际单位是projections（作为vertica的FlexStore体系中的一个概念，假如说column-store是为了加快OLAP数据库查询速度的首选，那么FlexStore的存在就是进一步在这基础上从physical design, database storage, and query execution三个方面提升速度）。
其中打破了按表储存的架构，表在vertica中只是一个逻辑概念，其本身还是一个特殊的projections，其物理储存全部用的是projections：
<code>
Projection
Optimized collections of table columns that provide physical storage for data. A projection can contain some or all of the columns of one or more tables. A projection that contains all of the columns of a table is called a super-projection. A projection that joins one or more tables is called a pre-join projection.
</code></p>

<ul>
<li>查看projection
select node_name,wos_row_count,ros_row_count from projection_storage where anchor_table_name=&lsquo;dim_exp&rsquo;;</li>
<li>wos vs ros
<a href="http://vertica-forums.com/viewtopic.php?t=126">http://vertica-forums.com/viewtopic.php?t=126</a></li>
</ul>


<h2>如何hack</h2>

<p>上面讲了很多原理，现在我们就开始动手操作吧，俗话说说的不如做的。</p>

<h3>删除数据——分区的最大用处</h3>

<p>到底使用分区比较好呢？还是用purage_table比较好呢？
果断构建partition好，因为如果用purage对于已经转移好的ros数据块（到底会怎么样？解释不清楚了吧！）速度会很慢。<a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/PURGE_TABLE.htm">https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/PURGE_TABLE.htm</a></p>

<h3>如何查看当前liencese的使用情况</h3>

<p>SELECT GET_COMPLIANCE_STATUS();</p>

<h3>查看每个表大小情况</h3>

<p><a href="http://woothon.iteye.com/blog/2211252">http://woothon.iteye.com/blog/2211252</a>
SELECT SUM(used_bytes) FROM   V_MONITOR.projection_storage</p>

<h3>表满了之后怎么办？</h3>

<p><a href="http://vertica.tips/2014/01/25/table-size/">http://vertica.tips/2014/01/25/table-size/</a>
This post will show how to get the compressed size of Vertica tables from column_storage and projection_storage system tables in the v_monitor schema. To get an estimated raw or uncompressed data size, see my earlier post on License Utilization.</p>

<p>column_storage
The following query aggregates the column_storage data to the table level. You can add column_name for more granularity. Note that empty tables will not appear in this table.</p>

<pre><code class="sql">SELECT anchor_table_schema,
       anchor_table_name,
       SUM(used_bytes) / ( 1024^3 ) AS used_compressed_gb
FROM   v_monitor.column_storage
GROUP  BY anchor_table_schema,
          anchor_table_name
ORDER  BY SUM(used_bytes) DESC;
</code></pre>

<p>projection_storage
The following query is almost identical to the one above, except for the table name. The lowest level in this system table is the table name. Any empty tables will appear in your result.
<code>sql
SELECT anchor_table_schema,
       anchor_table_name,
       SUM(used_bytes) / ( 1024^3 ) AS used_compressed_gb
FROM   v_monitor.projection_storage
GROUP  BY anchor_table_schema,
          anchor_table_name
ORDER  BY SUM(used_bytes) DESC;
</code></p>

<h3>索引到底是个什么鬼</h3>

<h2>任务控制</h2>

<h3>查看执行的任务，类似于mysql的show processlist</h3>

<p>SELECT session_id,statement_start,current_statement FROM SESSIONS
<a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/CLOSE_SESSION.htm">https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Functions/VerticaFunctions/CLOSE_SESSION.htm</a>
SELECT * FROM SESSIONS;</p>

<h3>杀死执行的任务，类似于mysql的kill</h3>

<p>SELECT CLOSE_SESSION(&lsquo;stress05-27944:0xc1a&rsquo;);
SELECT CLOSE_ALL_SESSIONS();</p>

<h3>数据类型</h3>

<p>在vertica中除了对int的定义不同，相比其他储存引擎，vertica的所有整形都是用64bit的，包括tinyint。
在vertica主意使用char的问题，发现当定义char(200),不满200长度的字段，会自动补全空白，这样改变了数据的内容，对于精确搜索时，这是个坑。最好改成varchar，但现在还不明白这个的性能有什么差别。</p>

<h2>当数据量巨大的时候，如何进行优化？如何正确的使用vertica？</h2>

<ul>
<li>建立索引？</li>
<li>建立projections <a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Statements/CREATEPROJECTION.htm">https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/SQLReferenceManual/Statements/CREATEPROJECTION.htm</a></li>
</ul>


<p>查看projection，使用下面命令：</p>

<pre><code>\dj
</code></pre>

<p>删除projection，使用</p>

<pre><code>drop projection &lt;projection_name&gt;
</code></pre>

<p>创建projection，使用</p>

<pre><code>create projection &lt;projection_name&gt;
</code></pre>

<p>Projection是作为vertica物理储存的概念，其大概相当于oracle的物化视图。核心概念就是对同一份数据集合做颗粒度分别储存，把一些经常使用的计算结果预先储存起来，以此来提高查询效率。
其中到底有什么奥妙，我们现在来看看：
先讲讲vertica的数据组织的logical model和physical model。</p>

<p>其中提到了很多种PROJECTION，但是建立方式都一样的，都是通过create project关键词。现在介绍下这几种类型：</p>

<ol>
<li>Superprojections</li>
</ol>


<p>这种是对细粒度的projection，涵盖所有列。这个projection是随着你建立表的时候，自动建立。且这也是vertica对projection最小数据要求。 （物理是怎么储存这些projections的呢？，怎么sharding的？怎么replicating？）</p>

<ol>
<li>Query-Specific Projections</li>
</ol>


<p>这中projection仅仅包含table的一部分列，能大幅度提高查询效率</p>

<ol>
<li>Pre-Join Projections</li>
</ol>


<p>这种projection包含表的PK/FK（主键和外键）的inner joins查询。能大幅度增加连接操作的查询时间。此外这种projection可以让你给经常查询的sql定义有序序列。</p>

<ol>
<li>Anchor Projections</li>
</ol>


<blockquote><p>An anchor projection is the physical storage for the anchor table data.</p></blockquote>

<p>官网的这句话貌似解释了等于白解释，因为anchor table data有是什么东西？不过总之就是要创建Top-K Projections和Live Aggregate Projections的时候，必须要创建Anchor Projections（why？）</p>

<p>提一句anchor projection在创建的时候必须定义segment值。</p>

<p>从限制条件看，这个因为是为了给Top-K Projections和Live Aggregate Projections建立分区索引。类似有cassendra的raw key。</p>

<ol>
<li>Top-K Projections
这种是

<blockquote><p>A Top-K query retrieves the top k rows from partition of selected rows. For example, in the following Top-K query, table1 has two columns: a and b. The query returns the top 10 rows associated with each value of column a.</p></blockquote></li>
</ol>


<p>这种projection主要是针对top k的查询优化。</p>

<pre><code>=&gt; SELECT * FROM table1 LIMIT 10 OVER (PARTITION BY a ORDER BY b);
</code></pre>

<p><a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/AdministratorsGuide/Projections/TopKProjections.htm">https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/AdministratorsGuide/Projections/TopKProjections.htm</a></p>

<ol>
<li>Live Aggregate Projections</li>
</ol>


<p>这种projection是对anchor table做一个聚集的与计算。anchor projection的segemntation必须是Live Aggregate Projections的子集。当数据查询的时候，vertica会自动把数据插入到Live Aggregate Projections，并且在查询的时候，确定使用哪个表，如果发现Live Aggregate Projections要快的话就直接从Live Aggregate Projections中出数据。</p>

<p>最后建立projection后，<a href="https://my.vertica.com/docs/7.1.x/HTML/Content/Authoring/ConnectingToHPVertica/ClientJDBC/KVApi/VerticaRoutableExecutor.htm">还可以设计路由规则</a></p>

<h5>实际例子：</h5>

<p>创建anchor projection报出的错误。
create projection anchor_test as select * from summary_hyper_hourly segmented by hash(creative_id) all nodes;
WARNING 4468:  Projection &lt;public.anchor_test> is not available for query processing. Execute the select start_refresh() function to copy data into this projection.
          The projection must have a sufficient number of buddy projections and all nodes must be up before starting a refresh
CREATE PROJECTION</p>

<p>创建聚集或者Top-K projection的时候报出的错误。
WARNING 6138:  Aggregate/Top-k projection &ldquo;test&rdquo; will be created for &ldquo;summary_hyper_hourly&rdquo;. Data in &ldquo;summary_hyper_hourly&rdquo; will be neither updated nor deleted
WARNING 4468:  Projection &lt;public.test> is not available for query processing. Execute the select start_refresh() function to copy data into this projection.
          The projection must have a sufficient number of buddy projections and all nodes must be up before starting a refresh</p>

<p>报这些错误是因为在建立projection之后必须进行refresh vertica才会把数据灌入其中。所以使用refresh函数，例如下面：</p>

<pre><code>select refresh('summary_hyper_hourly');
</code></pre>

<p>其中参数是table的name，而不是projection的name。
<a href="https://community.dev.hpe.com/t5/Vertica-Forum/Refreshing-Projection/td-p/229974">https://community.dev.hpe.com/t5/Vertica-Forum/Refreshing-Projection/td-p/229974</a></p>

<h4>优化case： 怎么优化join</h4>

<p>Join操作在逻辑模型上讲是用笛卡尔积来表示的，即形成一个N*M的二维表，然后再根据where条件或者on条件过滤。
但是如果逻辑，join这个操作又耗时，又耗内存和IO，因为需要把两个表的数据都加载进去。所以关于Join实际的算法大概分3种：</p>

<ol>
<li><p>嵌套循环联接（Nested Loop Join）：这个算法基本就是笛卡尔积的逻辑，也是最通用，效率也最低的算法。其中关于联接注意事项，参看<a href="http://blog.jobbole.com/100349/">这篇文章</a>的表联接部门，对于怎么做才能IO优化相当有用。这种联接方法有个好处就是可以没有联接关键词，生产全排列的笛卡尔积。</p>

<blockquote><p>算法特点就是，cpu的时间复杂度：O(N<em>M)，IO效率 N + N</em>M(如果M很大，不能放进内存),空间复杂度：O(N+M)</p></blockquote></li>
<li><p>HashJoin：如果内关系足够小的话，完全可以生产一个哈希表。然后在逐步扫描外部关系，在内关系的hashtable查找。时间复杂度：O(N * hashCost + M)。这个目前是最快的方法了，但是前提是内存足够，如果不够，那么只能说拜拜了。</p></li>
<li><p>MergeJoin：这个要求其连接字段是排好序的。这时候如果能用上索引的最好。</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
